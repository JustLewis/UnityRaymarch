#pragma kernel CSMain

RWTexture2D<float4> MapTex;

uniform float2 Resolution;
uniform float3 SunDir;
uniform float3 SkyLight = float3(0, 1, 0);

uniform float3 PlayerInput;
uniform float4 SphereData;
uniform float4 ShaderSphereData;
uniform float RotAngle;

uniform int MaxRaySteps;

float SDFSphere(float3 pos, float rad)
{
    return length(pos) - rad;
}

float map(in float3 pos)
{
    return min(SDFSphere(pos + SphereData.xyz, SphereData.w), SDFSphere(pos + ShaderSphereData, 0.1));
}

float TraceRay(float3 RO, float3 RD)
{
    float trace = 0.0;
    for (int i = 0; i < MaxRaySteps; i++)
    {
        float3 pos = RO + trace * RD;
        float hitdist = map(pos);
        if (hitdist < 0.001)
        {
            break;
        }
        trace += hitdist;
        if (trace >= 3.402823466e+38)
        {

            trace = -1.0;
            break;
        }
    }
    return trace;
}

float3 CalcNormal(in float3 pos)
{
    float2 e = float2(0.01, 0.0);//accuracy of a normal
    return normalize(float3(map(pos + e.xyy) - map(pos - e.xyy),
        map(pos + e.yxy) - map(pos - e.yxy),
        map(pos + e.yyx) - map(pos - e.yyx)));
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    //P translates the resolution coordinates into -1 to 1 screen space.
    float2 p = (2.0 * (float2)id.xy - Resolution.xy) / Resolution.y;
    float3 RayOrigin = float3(0,0, 1.0);
    //float3 RayDir = normalize(float3(p, -Resolution.x/Resolution.y));

    float3 Rot = RayOrigin + float3(1.3 * cos(RotAngle), 0.25, 1.3 * sin(RotAngle)); //y is angle 
    //cam rot matrix
    float3 cw = normalize(RayOrigin - Rot);//direction
    float3 cp = float3(0, 1, 0); //up
    float3 cu = normalize(cross(cw, cp));//get right direction
    float3 cv = cross(cu, cw);//up normalised.
    float3 RayDir = normalize(float3(p.x * cu + p.y * cv + -1.9 * cw));

    float3 Colour = float3(0.6, 0.67, 0.999) - 0.5 * RayDir.y;

    //Raymarch
    float t = TraceRay(RayOrigin, RayDir);

    //Ray hit something
    if (t > 0.0)
    {
        float3 pos = RayOrigin + t * RayDir;
        float3 normal =  CalcNormal(pos);
        float SunShadow = step(TraceRay(pos + normal * 0.001, SunDir), 0.0);
        float SunDiffuse = clamp(dot(normal, SunDir), 0.0, 1.0);
        Colour = float3(1.0, 0.90, 0.80) * SunDiffuse * SunShadow;
    }

    Colour = pow(Colour, float3(0.4545, 0.4545, 0.4545)); //correct lighting for eyes.

    MapTex[id.xy] = float4(Colour, 1.0);
}
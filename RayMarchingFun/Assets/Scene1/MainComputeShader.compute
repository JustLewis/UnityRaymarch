#pragma kernel CSMain

struct PlayerData 
{
    float3 Pos;
    float3 Vel;
    float Radius;
};


RWStructuredBuffer<PlayerData> Player; //holds position and velocity for the player.
RWTexture2D<float4> MapTex;

uniform float RotAngle;
uniform float2 Resolution;
uniform float3 SunDir;
uniform float3 SkyLight = float3(0, 1, 0);

uniform float2 PlayerInput; //force to be applied to player
uniform float3 Gravity;
uniform float Delta;
uniform int MaxRaySteps;
uniform uint BallCount;

float SdfElipsoid(in float3 pos, in float radius,in float3 Vel)
{
    return length(pos) - radius;
}

float Ground(in float3 pos, in float3 normal, in float distance)
{
    return dot(pos, normal) + distance;
}

float map(in float3 pos)
{
    //distance sphere
    float d = MaxRaySteps;
    d = Ground(pos, normalize(float3(0, 1, 0)), 1.0);
    for (uint i = 0; i < BallCount; i++)
    {
        float da = SdfElipsoid(pos + Player[i].Pos, Player[i].Radius, Player[i].Vel);
        d = min(da, d);
    }
    
    return d;
}
float3 Colourmap(in float3 pos)
{
    //distance sphere
    bool IsPlayer = true;
    float d = MaxRaySteps;
    for (uint i = 0; i < BallCount; i++)
    {
        float da = SdfElipsoid(pos + Player[i].Pos, Player[i].Radius, Player[i].Vel);
        if (IsPlayer && i > 0)
        {
            if (da < d)
            {
                IsPlayer = false;
            }
        }
        d = min(da, d);
    }
    float3 Colour = float3(1, 0, 0);
    if(!IsPlayer)
    {
        Colour = float3(1, 0, 1);
    }
    return Colour;
}
float3 CalcNormal(in float3 pos)
{
    float2 e = float2(0.0001, 0.0);//accuracy of a normal
    return normalize(float3(map(pos + e.xyy) - map(pos - e.xyy),
        map(pos + e.yxy) - map(pos - e.yxy),
        map(pos + e.yyx) - map(pos - e.yyx)));
}
float TraceRay(float3 RO, float3 RD)
{
    float t = 0.0;
    for (int i = 0; i < MaxRaySteps; i++)
    {
        float3 pos = RO + t * RD;
        float h = map(pos);
        if (h < 0.001)
        {
            break;
        }
        t += h;
        if (t > 100.0)
        {
            t = -1.0;
            break;
        }
    }
    return t;
}
float3 GetColour(in float3 pos)
{
    return Colourmap(pos);
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    //P translates the resolution coordinates into -1 to 1 screen space.
    float2 p = (2.0 * (float2)id.xy - Resolution.xy) / Resolution.y;

    float3 RayOrigin = float3(0.0, 1.0, 4.0);
    float3 RayDir = normalize(float3(p, -1.77778));
    float3 Colour = float3(0.6, 0.67, 0.999) - 0.5 * RayDir.y;



    float3 Rot = RayOrigin + float3(1.3 * cos(RotAngle), -0.025, 1.3 * sin(RotAngle)); //y is angle 

    //cam rot matrix
    float3 cw = normalize(RayOrigin - Rot);//direction
    float3 cp = float3(0, 1, 0); //up
    float3 cu = normalize(cross(cw, cp));//get right direction
    float3 cv = cross(cu, cw);//up normalised.

    //float3 RayDir = normalize(float3(p, -Resolution.x/Resolution.y));
    RayDir = normalize(float3(p.x * cu + p.y * cv + -1.9 * cw));

    //Raymarch
    float t = TraceRay(RayOrigin, RayDir);

    //Ray hit something
    if (t > 0.0)
    {
        float3 pos = RayOrigin + t * RayDir;
        float3 normal = CalcNormal(pos);
        float3 BaseColour = GetColour(pos);
        float SunDiffuse = clamp(dot(normal, SunDir), 0.0, 1.0);
        float SunShadow = step(TraceRay(pos + normal * 0.001, SunDir), 0.0);
        float SkyDiffuse = clamp(dot(normal, SkyLight), 0.0, 1.0);
        float SunBounce = clamp(dot(normal, -SkyLight), 0.0, 1.0);
        Colour = BaseColour + float3(1.0, 0.90, 0.80) * SunDiffuse * SunShadow;
        Colour += float3(0.0, 0.2, 0.4) * SkyDiffuse;
        Colour += float3(0.0, 0.20, 0.30) * SunBounce;
    }

    Colour = pow(Colour, float3(0.4545, 0.4545, 0.4545)); //correct lighting for eyes.

    MapTex[id.xy] = float4(Colour, 1.0);
}

#pragma kernel CSMainPhysics

[numthreads(1, 1, 1)]
void CSMainPhysics(uint3 id : SV_DispatchThreadID)
{
    float3 ForceToApply = -Gravity;
    if (Player[id.x].Pos.y > Player[id.x].Radius && Player[id.x].Vel.y > 1.0f)
    {
        //Player[id.x].Vel.y = -Player[id.x].Vel.y;//bounce?
        ForceToApply += (abs(Player[id.x].Pos.y) - Player[id.x].Radius) * Gravity * 100.0;
        //Player[id.x].Pos.y = Player[id.x].Radius;   
        //ForceToApply = 0.0;
    }
    for (uint i = 0; i < BallCount; i++)
    {
        if (i == id.x)
        {
            continue;
        }
        if (distance(Player[id.x].Pos, Player[i].Pos) < Player[id.x].Radius)
        {
            ForceToApply += -((Player[i].Pos - Player[id.x].Pos)/ Player[id.x].Radius) * 50.0f;
        }
    }

    Player[id.x].Pos = Player[id.x].Pos + Player[id.x].Vel * Delta + 0.5 * ForceToApply * Delta * Delta; //euler acceleration.
    Player[id.x].Vel = Player[id.x].Vel + ForceToApply * Delta * 0.9; //* 0.9 for deccelleration
}

#pragma kernel CSMainPlayerPhysics

[numthreads(1,1,1)]
void CSMainPlayerPhysics(uint3 id : SV_DispatchThreadID)
{
    float3 ForceToApply = float3(PlayerInput.x,0.0,PlayerInput.y) * 10;
    Player[id.x].Vel = Player[id.x].Vel + ForceToApply * Delta;
}
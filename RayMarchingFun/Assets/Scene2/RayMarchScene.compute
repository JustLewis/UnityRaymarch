#pragma kernel CSMain

struct ShapeData
{
    float3 Pos;
    float3 Radius;
    float Smoothness;
};

RWTexture2D<float4> MapTex;
RWStructuredBuffer<ShapeData> SphereData;
RWStructuredBuffer<ShapeData> TorusData;
RWStructuredBuffer<ShapeData> CubeData;

uniform float2 Resolution;
uniform float3 SunDir;
uniform float3 SkyLight = float3(0, 1, 0);

uniform uint SphereCount;
uniform uint CubeCount;
uniform uint TorusCount;

uniform float RotAngle;
uniform float3 PlayerInput;

uniform float3 CurrentLocation;
uniform float3 CurrentRadius;
uniform float CurrentSmooth;
uniform int CurrentShape;

uniform float3 Gravity;

uniform float Time;
uniform float Delta;
uniform int MaxRaySteps;

float SmoothDraw(float a, float b, float k)
{
    float height = max(k - abs(a - b), 0.0) / abs(k);
    if (k < 0.0)
    {
        return min(a, b) - height * height /(abs(k) * 4.0);
    }
    return max(-a, b) + height * height / (k * 4.0);

}

float sdfCube(in float3 pos, in float3 radius)
{
    float3 q = abs(pos) - radius;
    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);
}

float sdfElipsoid(in float3 pos, in float3 radius)
{
    float ka = length(pos / radius);
    float kb = length(pos / radius / radius);

    return ka *(ka - 1.0) /kb;
}

float sdfTorus(in float3 pos, in float3 radius)
{
    float thickness = radius.x / 2.0;
    float2 q = float2(length(pos.xz) - radius.x, pos.y);
    return length(q) - thickness;
}

float Ground(in float3 pos, in float3 normal, in float distance)
{
    return dot(pos, normal) + distance;
}

float model(in float3 pos)
{
    float CurrentModel = MaxRaySteps;
    if (CurrentShape == 0)
    {
        CurrentModel = sdfElipsoid(pos + CurrentLocation,CurrentRadius);
    }
    else if (CurrentShape == 1)
    {
        CurrentModel = sdfTorus(pos + CurrentLocation, CurrentRadius);
    }
    else if(CurrentShape ==2)
    {
        CurrentModel = sdfCube(pos + CurrentLocation, CurrentRadius);
    }

    return CurrentModel; 

    //float Elips = sdfElipsoid(pos + float3(0.0, -0.5,1.0), radius);
    //float Y = sdfElipsoid(pos + float3(SecondBall.x, SecondBall.y, 0.75), radius * 0.52f);
    //float YMirror = sdfElipsoid(pos + float3(-SecondBall.x, SecondBall.y, 0.75), radius * 0.52f);
    //Y = min(Y, YMirror);

    //float Smile = sdfElipsoid(pos + float3(0.0, -0.4, .80), float3(0.2,0.1,0.1));
    //Y = min(Y, Smile);

    //return SmoothDraw(Y, Elips, SecondBall.z);
}

float map(in float3 pos)
{
    //floor first
    float T = Ground(pos, normalize(float3(0.0, 1, 0.0)), 0.1); //floor to be drawn.
    for (uint i = 0; i < SphereCount; i++)
    {
        float ta = sdfElipsoid(pos + SphereData[i].Pos, SphereData[i].Radius);
        //if (ta < T)
        //{
            T = SmoothDraw(ta, T, SphereData[i].Smoothness);
        //}
    }

    for (i = 0; i < TorusCount; i++)
    {
        float ta = sdfTorus(pos + TorusData[i].Pos, TorusData[i].Radius);
        //if (ta < T)
        //{
            T = SmoothDraw(ta, T, TorusData[i].Smoothness);
        //}
    }

    for (i = 0; i < CubeCount; i++)
    {
        float ta = sdfCube(pos + CubeData[i].Pos, CubeData[i].Radius);
       /* if (ta < T)
        {*/
            T = SmoothDraw(ta, T, CubeData[i].Smoothness);
        //}
    }
    
    float d = model(pos);
    T = SmoothDraw(d, T, CurrentSmooth);
    return T;
}
float3 CalcNormal(in float3 pos)
{
    float2 e = float2(0.0001, 0.0);//accuracy of a normal
    return normalize(float3(map(pos + e.xyy) - map(pos - e.xyy),
        map(pos + e.yxy) - map(pos - e.yxy),
        map(pos + e.yyx) - map(pos - e.yyx)));
}
float TraceRay(float3 RO, float3 RD)
{
    float t = 0.0;
    for (int i = 0; i < MaxRaySteps; i++)
    {
        float3 pos = RO + t * RD;
        float h = map(pos);
        if (h < 0.001)
        {
            break;
        }
        t += h;
        if (t > 20.0)
        {
            t = -1.0;
            break;
        }
    }
    return t;
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    //P translates the resolution coordinates into -1 to 1 screen space.
    float2 p = (2.0 * (float2)id.xy - Resolution.xy) / Resolution.y;

    float3 RayOrigin = PlayerInput;
    float3 Rot = RayOrigin + float3(1.3 * cos(RotAngle), -0.25, 1.3 * sin(RotAngle)); //y is angle 

    //cam rot matrix
    float3 cw = normalize(RayOrigin - Rot);//direction
    float3 cp = normalize(float3(0, 1, 0)); //up
    float3 cu = normalize(cross(cw, cp));//get right direction
    float3 cv = cross(cu, cw);//up normalised.

    //float3 RayDir = normalize(float3(p, -Resolution.x/Resolution.y));
    float3 RayDir = normalize(float3(p.x * cu + p.y * cv + -1.9 * cw));

    //float3 Colour = float3(0.6, 0.67, 0.999) - 0.5 * RayDir.y;
    float3 Colour = float3(29.0 / 255.0, 43.0 / 255.0, 53.0 / 255.0);// -0.5 * RayDir.y;

    //Raymarch
    float t = TraceRay(RayOrigin, RayDir);

    //Ray hit something
    if (t > 0.0)
    {
        Colour = float3(254.0 / 255.0, 109.0 / 255.0, 93.0 / 255.0);
        float3 pos = RayOrigin + t * RayDir;
        float3 normal = CalcNormal(pos);
        float3 SunDiffuse = clamp(dot(normal, SunDir), 0.0, 1.0) * Colour;
        float SunShadow = step(TraceRay(pos + normal * 0.001, SunDir), 0.0);
        float SkyDiffuse = clamp(dot(normal, SkyLight), 0.0, 1.0);
        float SunBounce = clamp(dot(normal, -SkyLight), 0.0, 1.0);
        Colour = float3(81.0 / 255.0, 182.0 / 255.0, 245.0 / 255.0) * SunDiffuse * SunShadow;
        Colour += float3(29.0 / 255.0, 43.0 / 255.0, 53.0 / 255.0) * SkyDiffuse ;
        Colour += float3(114.0 / 255.0, 237.0 / 255.0, 164.0 / 255.0) * SunBounce;
        
    }

     Colour = pow(Colour, float3(0.4545, 0.4545, 0.4545)); //correct lighting for eyes.

    MapTex[id.xy] = float4(Colour, 1.0);
}